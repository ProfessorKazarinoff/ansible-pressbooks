# ansible role that installs pressbooks using the bedrocksso repo
---
# Print out a message to the user about the playbook that's running
- name: Print message
  ansible.builtin.debug:
    msg: Running pressbooks_bedrock role main.yml playbook

- name: Clone the repository
  ansible.builtin.git:
    repo: "https://github.com/pressbooks/pressbooksoss-bedrock.git"  # Replace with your repository URL
    dest: "/home/{{ user_name }}/{{ domain_name }}/"
    version: production  # Optional: specify a branch, tag, or commit hash
    clone: yes  # Ensures the repository is cloned if it doesn't exist
    update: yes  # Ensures the repository is updated if it already exists

- name: Check if the bedrock folder is already present in var/www
  ansible.builtin.stat:
    path: "/var/www/{{ domain_name }}/"
  register: bedrock_in_var_www_dir_status

- name: Report bedrock files are already in place in /var/www/
  ansible.builtin.debug:
    msg: the bedrock files are already in place in /var/www/
  when: bedrock_in_var_www_dir_status.stat is defined and bedrock_in_var_www_dir_status.stat.exists

- name: Report bedrock files are not in place yet and need to be downloaded and moved
  ansible.builtin.debug:
    msg: the bredrock files are not in place and need to be downloaded and moved
  when: not bedrock_in_var_www_dir_status.stat.exists

- name: Run a command that uses non-posix shell-isms (in this example /bin/sh doesn't handle redirection and wildcards together but bash does)
  ansible.builtin.command: "composer install --working-dir=/home/{{ user_name }}/{{ domain_name }}/"
  register: composer_output

- name: Print the composer install command output
  ansible.builtin.debug:
    msg: "{{ composer_output.stdout }}"

# - name: copy .env-example as .env add config details

# run wp core multisite-install --url="https://example.com" --title="Your Network Title" --admin_user="username" --admin_password="password" --admin_email="youremail@example.com"

# run wp plugin activate pressbooks --network
